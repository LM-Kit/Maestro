@inject ModelListViewModel ModelListViewModel

<MudDialog Class="model-download-root">
    <DialogContent>
        <div class="d-flex flex-column">
            <div class="model-download-header-footer justify-center align-center gap-2">
                <MudIcon Icon="fas fa-download" Style="font-size: 0.8rem !important; color: var(--Outline)" />
                <MudText Align="Align.Center" Style="color: var(--Outline)" Typo="Typo.caption">
                    Downloads
                </MudText>
            </div>

            <div class="model-download-body">
                @if (ModelListViewModel.ModelDownloads.Count == 0)
                {
                    <div class="d-flex align-center">
                        <MudText Typo="Typo.caption" Align="Align.Center">
                            Models that you download will appear here.
                        </MudText>

                    </div>
                }
                else
                {
                    @foreach (var model in ModelListViewModel.ModelDownloads)
                    {
                        <div class="model-download-item">
                            <MudText Typo="Typo.body2">
                                @model.Name
                            </MudText>

                            <MudText Typo="Typo.caption">
                                @model.DownloadInfo.Progress
                            </MudText>
                        </div>
                    }
                }
            </div>

            <div class="model-download-header-footer justify-end">
                <div class="open-directory-wrapper" @onclick="OpenModelDirectory">
                    <MudText Typo="Typo.caption">
                        Open download directory
                    </MudText>
                </div>

            </div>
        </div>
    </DialogContent>
</MudDialog>

<style>

    .model-download-root {
        display: flex;
        flex-direction: column;
        width: 24rem;
        border-radius: 1rem;
        border: 1px solid var(--OutlineVariant);
    }

    .model-download-body {
        display: flex;
        flex-direction: column;
        align-content: center;
        align-items: center;
        justify-content: center;
        height: 20rem;
        background-color: var(--Surface);
    }

    .open-directory-wrapper {
        width: 50%;
        background-color: var(--Surface2);
        display: flex;
        justify-content: center;
        transition: all ease-out 0.3s;
    }

        .open-directory-wrapper:hover {
            background-color: var(--Surface);
        }

    .model-download-header-footer {
        height: 3rem;
        background-color: var(--Surface2);
        display: flex;
        flex-direction: row;
    }

    .open-directory-button {
        border-radius: 0 important;
        background-color: var(--Surface2) !important;
    }

        .open-directory-button:hover {
            background-color: var(--Surface) !important;
        }
</style>
@code {
    [Parameter] public MarkupString Message { get; set; } = default(MarkupString);

    [Parameter] public string Title { get; set; } = string.Empty;

    [Parameter] public string ActionText { get; set; } = string.Empty;

    [Parameter] public bool IsImportant { get; set; }

    [CascadingParameter] private IMudDialogInstance DialogInstance { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await InvokeAsync(() => StateHasChanged());
    }

    private void OpenModelDirectory()
    {
        // ModelListViewModel
    }
}

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
}