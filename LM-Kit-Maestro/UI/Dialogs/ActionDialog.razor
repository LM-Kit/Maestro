<MudDialog Class="width-24">
    <DialogContent>
            <div class="dialog-content-root radius-1 pa-2">
                <MudText Typo="Typo.subtitle2">
                    @Title
                </MudText>

                <MudText Typo="Typo.caption">
                    @((MarkupString)Message)
                </MudText>

                <div class="d-flex justify-end mt-4">
                    <MudButtonGroup>
                        <MudButton @onclick="() => DialogInstance.Cancel()" Variant="Variant.Text">
                            <MudText Color="@(IsImportant ? Color.Error : Color.Default)" Typo="Typo.subtitle2">Delete</MudText>
                        </MudButton>
                        <MudButton @onclick="() => DialogInstance.Close(true)" Variant="Variant.Text">
                            <MudText Typo="Typo.subtitle2">Cancel</MudText>
                        </MudButton>
                    </MudButtonGroup>
                 </div>

            </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public MarkupString Message { get; set; } = default(MarkupString);

    [Parameter] public string Title { get; set; } = string.Empty;

    [Parameter] public string ActionText { get; set; } = string.Empty;

    [Parameter] public bool IsImportant { get; set; }

    [CascadingParameter] private IMudDialogInstance DialogInstance { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await InvokeAsync(() => StateHasChanged());
    }


}

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
}