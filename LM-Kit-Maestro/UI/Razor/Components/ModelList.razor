@inject ModelListViewModel ModelListViewModel

<MudStack Class="model-list-root" Spacing="@(Dense ? 0 : 2)">
    @foreach (var model in ModelListViewModel.Models)
    {
            <ListItemWrapper>
                <ChildContent>
                    <div @onclick="() => OnClick.InvokeAsync(model)">
                        <ModelCard Dense="Dense" Selectable="Selectable" ViewModel="model"/>
                    </div>
                </ChildContent>

                <ActionSheet>
                    <div class="d-flex flex-column item-actions">
                    @if (model.IsLocallyAvailable)
                    {
                                <MudButton Class="action-button" Variant="Variant.Text"
                                @onclick="() => ModelListViewModel.OpenModelInExplorer(model)">
                                    <MudText Typo="Typo.subtitle2">Reveal in explorer</MudText>
                                </MudButton>
                    }

                        <MudButton Class="action-button" Variant="Variant.Text"
                        @onclick="() => ModelListViewModel.OpenModelHfLink(model)">
                            <MudText Typo="Typo.subtitle2">Open on Hugging Face</MudText>
                        </MudButton>

                    @if (model.IsLocallyAvailable)
                    {
                                <MudButton Class="action-button" Variant="Variant.Text"
                                @onclick="() => ModelListViewModel.DeleteModel(model)">
                                    <MudText Color="Color.Error" Typo="Typo.subtitle2">Delete from disk</MudText>
                                </MudButton>
                    }
                    </div>
                </ActionSheet>
            </ListItemWrapper>
    }
</MudStack>

@code {
    [Parameter] public EventCallback<ModelInfoViewModel> OnClick { get; set; }

    private bool _dense;
    [Parameter]
    public bool Dense
    {
        get => _dense;
        set
        {
            if (value != _dense)
            {
                _dense = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    public bool _selectable;
    [Parameter]
    public bool Selectable
    {
        get => _selectable;
        set
        {
            if (value != _selectable)
            {
                _selectable = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }
}


<style>
    .item-actions {
        padding-inline: 8px;
        padding-block: 4px;
        background-color: var(--Surface2);
        border-radius: 4px;
        border: 1px solid var(--OutlineVariant);
    }

    .action-button:hover {
        background-color: var(--Surface15) !important;
    }

    .model-list-root{
    }
</style>