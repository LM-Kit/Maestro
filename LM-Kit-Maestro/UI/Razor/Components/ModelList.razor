@inject ModelListViewModel ModelListViewModel


<MudStack Spacing="@(Dense ? 0 : 5)">
    @foreach (var modelItem in _modelItems)
    {
        <ListItemWrapper LimitWidth="LimitWidth" ListItemViewModel="modelItem">
            <ChildContent>
                @* <div class="model-item-root" @onclick="() => OnClick.InvokeAsync(modelItem.ViewModel)"> *@
                <ModelCard IsFocused="modelItem.IsShowingActionSheet || modelItem.IsHovered" Dense="Dense" Selectable="Selectable" ViewModel="modelItem.ViewModel" />
                @* </div> *@
            </ChildContent>

            <ActionSheet>
                <div class="d-flex flex-column item-actions">
                    @if (modelItem.ViewModel.IsLocallyAvailable)
                    {
                        <MudButton Class="action-button" Variant="Variant.Text"
                                   @onclick="() => ModelListViewModel.OpenModelInExplorer(modelItem.ViewModel)">
                            <MudText Typo="Typo.subtitle2">Reveal in explorer</MudText>
                        </MudButton>    
                    }

                    <MudButton Class="action-button" Variant="Variant.Text"
                               @onclick="() => ModelListViewModel.OpenModelHfLink(modelItem.ViewModel)">
                        <MudText Typo="Typo.subtitle2">Open on Hugging Face</MudText>
                    </MudButton>

                    @if (modelItem.ViewModel.IsLocallyAvailable)
                    {
                        <MudButton Class="action-button" Variant="Variant.Text"
                                   @onclick="() => ModelListViewModel.DeleteModel(modelItem.ViewModel)">
                            <MudText Color="Color.Error" Typo="Typo.subtitle2">Delete from disk</MudText>
                        </MudButton>
                    }
                </div>
            </ActionSheet>
        </ListItemWrapper>
    }
</MudStack>


<style>
    .item-actions {
        padding-inline: 8px;
        padding-block: 4px;
        background-color: var(--Surface2);
        border-radius: 4px;
        border: 1px solid var(--OutlineVariant);
    }

    .action-button:hover {
        background-color: var(--Surface15) !important;
    }
</style>

@code {
    private ObservableCollection<ListItemViewModel<ModelInfoViewModel>> _modelItems = new();
    [Parameter] public EventCallback<ModelInfoViewModel> OnClick { get; set; }

    private bool _dense;
    [Parameter]
    public bool Dense
    {
        get => _dense;
        set
        {
            if (value != _dense)
            {
                _dense = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    public bool _selectable;
    [Parameter]
    public bool Selectable
    {
        get => _selectable;
        set
        {
            if (value != _selectable)
            {
                _selectable = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }
    
    private bool _limitWidth;
    [Parameter]
    public bool LimitWidth
    {
        get => _limitWidth;
        set
        {
            if (value != _limitWidth)
            {
                _limitWidth = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        UpdateModels();

        ModelListViewModel.Models.CollectionChanged += OnModelsChanged;
    }

    private void OnModelsChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        InvokeAsync(UpdateModels);
    }

    private void UpdateModels()
    {
        _modelItems.Clear();

        foreach (var model in ModelListViewModel.Models)
        {
            _modelItems.Add(new ListItemViewModel
                <ModelInfoViewModel>(model));
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ModelListViewModel.Models.CollectionChanged -= OnModelsChanged;
    }

}
