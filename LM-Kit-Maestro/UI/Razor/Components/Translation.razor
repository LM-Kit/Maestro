@inject IClipboardHandler ClipboardHandler

<div id="translation-container">
    <div id="translation-header">
        <div class="language-select">
            <label for="input-language">Input language:</label>
            <select id="input-language" @bind="TranslationViewModel.InputLanguage">
                @foreach (var language in Enum.GetValues<Language>())
                {
                    if (language == Language.Undefined)
                    {
                                           <option value="@language">Automatically detect</option>
                    }
                    else
                    {
                                     <option value="@language">@language</option>
                    }
                }
            </select>
        </div>

        <IconButton Icon="fa-arrow-right-arrow-left" OnClick="OnCopyResultButtonClicked" />

        <div class="language-select">
            <label for="output-language">Output language:</label>
            <select id="output-language" @bind="TranslationViewModel.OutputLanguage">
                @foreach (var language in Enum.GetValues<Language>().Skip(1))
                {
                                <option value="@language">@language</option>
                }
            </select>
        </div>
    </div>

    <div id="translation-body">
        <div id="translation-input">
            <InputBox @bind-InputText="TranslationViewModel.InputText" />
        </div>

        <div class="vertical-separator"></div>

        <div id="translation-output">
            <InputBox @bind-InputText="TranslationViewModel.LatestResult" Readonly="true" />
        </div>
    </div>
</div>

@code
{
    // Using a timer to automatically refresh translation result when no user input is detected for a given time span.
    private Timer? _inputTimer;

    bool resultJustCopied;

    bool ResultJustCopied
    {
        get => resultJustCopied;
        set
        {
            resultJustCopied = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public required TranslationViewModel TranslationViewModel { get; set; }

    [Parameter] public EventCallback<AssistantViewModelBase> TranslationViewModelChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        TranslationViewModel.PropertyChanged += OnTranslationViewModelPropertyChanged;
    }

    private async Task OnCopyResultButtonClicked()
    {
        bool success = await ClipboardHandler.CopyTextToClipboardAsync(TranslationViewModel.LatestResult != null ? TranslationViewModel.LatestResult : "");

        if (success)
        {
            if (!ResultJustCopied)
            {
                var _ = Task.Run(async () =>
                {
                    ResultJustCopied = true;
                    await Task.Delay(3000);
                    ResultJustCopied = false;
                });
            }
        }
    }

    private void OnTranslationViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(TranslationViewModel.InputText))
        {
            _inputTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            _inputTimer = new Timer(OnDebounceTimerElapsed, null, 1000, Timeout.Infinite);
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void OnDebounceTimerElapsed(object? state)
    {
        _inputTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        TranslationViewModel.Submit();
    }

    private static List<Language> GetAvailableLanguages(bool inputLanguage)
    {
        var values = Enum.GetValues<Language>().Skip(1).ToList();

        values.Sort();

        if (inputLanguage)
        {
            values.Insert(0, Language.Undefined);
        }

        return values;
    }

    private void OnSwapButtonClicked()
    {

    }
}