<div class="model-card" @onclick="OnItemClicked">
    <div class="text-truncate">
        @(ViewModel.ModelInfo.ShortModelName)
    </div>

    <div>
        @(ViewModel.ModelInfo.Architecture)

    </div>

    <MudStack Row="true" AlignItems="AlignItems.Center">
        @if (ViewModel.IsChatModel)
        {
            <MudIcon Icon="fas fa-message" Size="Size.Small"/>
        }

        @if (ViewModel.HasVisionCapability)
        {
            <MudIcon Icon="fas fa-eye" Size="Size.Small"/>
        }

        @if (ViewModel.IsCodeModel)
        {
            <MudIcon Icon="@Icons.Material.Outlined.Code" Size="Size.Small"/>
        }

        @if (ViewModel.IsMathModel)
        {
            <MudIcon Icon="@Icons.Material.Outlined.Calculate" Size="Size.Small"/>
        }
    </MudStack>

    <MudStack Row="true">
        <MudText>
            @ViewModel.ModelSize
        </MudText>

        <MudText>
            @ViewModel.MaxContextLengthKB
        </MudText>

        <MudText>
            @ViewModel.Precision
        </MudText>

        <MudText>
            @ViewModel.MaxContextLengthKB
        </MudText>
    </MudStack>


    <MudPopover Open="@_isShowingActionSheet" Fixed="true">
        <div Class="d-flex flex-column item-actions">
            <MudButton Variant="Variant.Text" @onclick="OnOpenInExplorerClicked">
                <MudText Typo="Typo.subtitle2">Select</MudText>
            </MudButton>
            <MudButton Variant="Variant.Text" @onclick="OnOpenHfLinkClicked">
                <MudText Typo="Typo.subtitle2">Rename</MudText>
            </MudButton>

            @if (ViewModel.DownloadInfo.Status == DownloadStatus.Downloaded)
            {
                <MudButton Variant="Variant.Text" @onclick="OnDeleteClicked">
                    <MudText Color="Color.Error" Typo="Typo.subtitle2">Delete</MudText>
                </MudButton>
            }
        </div>
    </MudPopover>
</div>

<style>
    .model-card {
        max-width: 800px;
        display: flex;
        width: 100%;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        border: 1px solid var(--Outline);
        border-radius: 4px;
    }
</style>

@code {
    [Parameter] public required ModelInfoViewModel ViewModel { get; set; }

    [Parameter] public EventCallback<ModelInfoViewModel> OpenInExplorerClicked { get; set; }
    [Parameter] public EventCallback<ModelInfoViewModel> OpenHfLinkClicked { get; set; }
    [Parameter] public EventCallback<ModelInfoViewModel> DeleteClicked { get; set; }

    private bool _isShowingActionSheet;

    private async void OnItemClicked()
    {
        if (!_isShowingActionSheet)
        {
            _isShowingActionSheet = true;
        }
        else
        {
            _isShowingActionSheet = false;
        }
    }

    private async Task OnOpenInExplorerClicked()
    {
        await OpenInExplorerClicked.InvokeAsync();
    }

    private async Task OnOpenHfLinkClicked()
    {
        await OpenHfLinkClicked.InvokeAsync();
    }

    private async Task OnDeleteClicked()
    {
        await DeleteClicked.InvokeAsync();
    }

    private async Task OnDownloadClicked()
    {
        // await OnDownloadClicked.InvokeAsync();
    }
}