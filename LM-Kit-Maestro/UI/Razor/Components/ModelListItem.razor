<div id="root">
    <div class="model-card" @onclick="OnItemClicked">
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            @ViewModel.ModelInfo.ShortModelName
                        </MudText>

                        <div class="dot @(GetScoreClass(ViewModel.CompatibilityLevel))"></div>
                    </MudStack>

                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Row="true">
                        @if (ViewModel.IsChatModel)
                        {
                            <MudIcon Color="Color.Secondary" Class="small-icon" Icon="@Icons.Material.Outlined.Message" Size="Size.Small" />
                        }

                        @if (ViewModel.HasVisionCapability)
                        {
                            <MudIcon Color="Color.Secondary" Class="small-icon" Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" />
                        }

                        @if (ViewModel.IsCodeModel)
                        {
                            <MudIcon Color="Color.Secondary" Class="small-icon" Icon="@Icons.Material.Outlined.Code" Size="Size.Small" />
                        }

                        @if (ViewModel.IsMathModel)
                        {
                            <MudIcon Color="Color.Secondary" Class="small-icon" Icon="@Icons.Material.Outlined.Calculate" Size="Size.Small" />
                        }
                    </MudStack>
                </MudStack>
            </MudItem>

            <MudItem xs="6" Class="d-flex align-items-center">
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudText Typo="Typo.overline" Class="outline">
                        @Helpers.FileHelpers.FormatFileSize(ViewModel.ModelInfo.FileSize)
                    </MudText>

                    <MudIcon Class="outline xs-icon"
                             Icon="@(ViewModel.IsLocallyAvailable ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Cloud)"
                             Color="Color.Dark"
                             Size="Size.Small" />
                </MudStack>
            </MudItem>

            <MudItem xs="6">
                <MudStack Justify="Justify.SpaceBetween" Row="true" Class="outline">
                    <MudText Typo="Typo.overline">
                        @ViewModel.ModelInfo.Architecture
                    </MudText>

                    <MudText Typo="Typo.overline">
                        @ViewModel.ModelSize
                    </MudText>

                    <MudText Typo="Typo.overline">
                        @ViewModel.MaxContextLengthKB
                    </MudText>

                    <MudText Typo="Typo.overline">
                        @ViewModel.Precision
                    </MudText>

                    <MudText Typo="Typo.overline">
                        @ViewModel.MaxContextLengthKB
                    </MudText>
                </MudStack>
            </MudItem>

        </MudGrid>
    </div>

    <MudOverlay @bind-Visible="_isShowingActionSheet" AutoClose="true" />
    <div>
        <MudPopover AnchorOrigin="Origin.TopLeft" Open="@_isShowingActionSheet" Fixed="true">
            <div Class="d-flex flex-column item-actions">
                <MudButton Variant="Variant.Text" @onclick="OnOpenInExplorerClicked">
                    <MudText Typo="Typo.subtitle2">Reveal in explorer</MudText>
                </MudButton>
                <MudButton Variant="Variant.Text" @onclick="OnOpenHfLinkClicked">
                    <MudText Typo="Typo.subtitle1">Open on Hugging Face</MudText>
                </MudButton>

                @if (ViewModel.DownloadInfo.Status == DownloadStatus.Downloaded)
                {
                    <MudButton Variant="Variant.Text" @onclick="OnDeleteClicked">
                        <MudText Color="Color.Error" Typo="Typo.subtitle2">Delete from disk</MudText>
                    </MudButton>
                }
            </div>
        </MudPopover>
    </div>
</div>

<style>

    #root {
        width: 100%;
        padding: 20px;
        display: flex;
        flex-direction: row;
        justify-content: center;
    }

    .model-card {
        max-width: 800px;
        flex-direction: row;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        border: 1px solid var(--Outline);
        border-radius: 4px;
        background-color: var(--Surface15);
        flex-grow: 1;
        cursor: pointer;
    }

        .model-card:hover {
            background-color: var(--Surface2);
        }

    .outline {
        color: var(--Outline) !important;
    }

    .small-icon {
        font-size: 1rem !important;
    }

    .xs-icon {
        font-size: 0.85rem !important;
    }

    .primary {
        color: var(--Primary);
    }

    .secondary {
        color: var(--Secondary);
    }

    .tertiary {
        color: var(--Tertiary);
    }

    .score-1 {
        background-color: #FA8168;
        color: #FA8168;
    }

    .score-2 {
        background-color: #FFD21E;
        color: #FFD21E;
    }

    .score-3 {
        background-color: #1C8736;
        color: #1C8736;
    }

</style>

@code {
    [Parameter] public required ModelInfoViewModel ViewModel { get; set; }

    [Parameter] public EventCallback<ModelInfoViewModel> OpenInExplorerClicked { get; set; }
    [Parameter] public EventCallback<ModelInfoViewModel> OpenHfLinkClicked { get; set; }
    [Parameter] public EventCallback<ModelInfoViewModel> DeleteClicked { get; set; }

    private bool _isShowingActionSheet;

    private async void OnItemClicked()
    {
        if (!_isShowingActionSheet)
        {
            _isShowingActionSheet = true;
        }
        else
        {
            _isShowingActionSheet = false;
        }
    }

    private async Task OnOpenInExplorerClicked()
    {
        await OpenInExplorerClicked.InvokeAsync();
    }

    private async Task OnOpenHfLinkClicked()
    {
        await OpenHfLinkClicked.InvokeAsync();
    }

    private async Task OnDeleteClicked()
    {
        await DeleteClicked.InvokeAsync();
    }

    private async Task OnDownloadClicked()
    {
        // await OnDownloadClicked.InvokeAsync();
    }

    private static string GetScoreClass(float score)
    {
        return score < 0.4 ? "score-1" : score < 0.7 ? "score-2" : "score-3";
    }
}