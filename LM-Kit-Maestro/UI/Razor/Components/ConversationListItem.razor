@inherits ComponentBase

<div @onclick="OnSelected" id="item-container" class="@(IsSelected ? "item-selected" : "")">
    <MudText Typo="Typo.subtitle1" Inline=true>
        @ViewModel.Title
    </MudText>

    <div id="show-more-button" class="@(IsSelected ? "show" : "hide")">
        <MudIconButton @onclick="() => ViewModel.IsShowingActionPopup = true"
        Icon="@Icons.Material.Filled.MoreHoriz"
        Size="Size.Small"
        Color="Color.Dark" />
    </div>
</div>

<MudPopover Open="@ViewModel.IsShowingActionPopup" Fixed="true" Class="px-4 pt-4">
    <div class="d-flex flex-column">
        <MudButton @onclick="OnRenameClicked" Class="ml-auto mr-n3 mb-1" Color="Color.Primary">Rename</MudButton>
        <MudButton @onclick="OnSelected" Class="ml-auto mr-n3 mb-1" Color="Color.Primary">Select</MudButton>
        <MudButton @onclick="OnRenameClicked" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Delete</MudButton>
    </div>
</MudPopover>

@code
{
    [Parameter] public EventCallback<ConversationViewModel> OnSelect { get; set; }
    [Parameter] public EventCallback<ConversationViewModel> OnShowMore { get; set; }
    [Parameter] public EventCallback<ConversationViewModel> OnDelete { get; set; }
    [Parameter] public required ConversationViewModel ViewModel { get; set; }
    [Parameter] public bool IsSelected { get; set; }

    private void OnRenameClicked()
    {
        ViewModel.IsRenaming = true;
        ViewModel.IsShowingActionPopup = false;
    }

    private void OnSelected()
    {
        ViewModel.IsShowingActionPopup = false;
        OnSelect.InvokeAsync(ViewModel);
    }

    private void OnDeleteClicked()
    {
        ViewModel.IsShowingActionPopup = false;
        OnDelete.InvokeAsync(ViewModel);
    }
}