<div @ref="_parentDiv" id="list-item-container">
    <div @onclick="OnItemClicked"
         @oncontextmenu="HandleRightClick"
         @oncontextmenu:preventDefault="true"
         class="@(_isShowingActionSheet ? "hover-effect" : "" )">
        @ChildContent
    </div>

    <MudOverlay @bind-Visible="_isShowingActionSheet" AutoClose="true" />

    <div style="position: absolute; left: @($"{_popoverX}px"); top:@($"{_popoverY}px")">
        <MudPopover AnchorOrigin="Origin.TopLeft" Open="@_isShowingActionSheet" Fixed="true">
            @ActionSheet
        </MudPopover>
    </div>
</div>

@code {
    private ElementReference _parentDiv;
    private int _popoverX;
    private int _popoverY;
    private bool _isShowingActionSheet;

    [Parameter] public required RenderFragment ChildContent { get; set; }

    [Parameter] public required RenderFragment ActionSheet { get; set; }


    private async Task OnItemClicked(MouseEventArgs e)
    {
    }

    private async Task HandleRightClick(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            var rect = await _parentDiv.GetClientRectAsync();

            _popoverX = (int)(e.ClientX - rect.Left);
            _popoverY = (int)(e.ClientY - rect.Top);
            _isShowingActionSheet = !_isShowingActionSheet;
            
            await InvokeAsync(StateHasChanged);
        }
    }
}

<style>
    #list-item-container {
        position: relative;
    }

    .hover-effect {
        background-color: var(--Surface);
    }
</style>
