@page "/models"

@inject ISnackbar Snackbar
@using LMKit.Maestro.Helpers
@inherits MvvmComponentBase<ModelsPageViewModel>

<SectionContent SectionName="top-bar">
    <div class="d-flex flex-row gap-2 flex-grow-1 justify-center align-center align-content-center px-4">
        <MudText Typo="Typo.body2">
            Model folder:
        </MudText>

        <div id="model-folder-container">
            <MudText>
                @ViewModel.AppSettingsService.ModelStorageDirectory
            </MudText>
        </div>

        <IconButton Style="IconButton.ButtonStyle.SecondaryAction"
                    Icon="fas fa-edit"
                    Tooltip="@Locales.SelectAnotherFolder"
                    OnClick="ViewModel.PickModelsFolder" />

        <IconButton Style="IconButton.ButtonStyle.SecondaryAction"
                    Icon="fas fa-folder-open"
                    Tooltip="@Locales.OpenInFileExplorer"
                    OnClick="ViewModel.OpenModelsFolder" />

        <IconButton Style="IconButton.ButtonStyle.SecondaryAction"
                    Icon="fas fa-rotate-left"
                    Tooltip="@Locales.ResetModelFolder"
                    OnClick="ViewModel.ResetModelsFolder" />
    </div>
</SectionContent>

<div id="model-page-container">
    <div class="d-flex flex-row justify-center align-center align-content-center px-4">

        @if (ViewModel.FileManager.FileCollectingInProgress)
        {
            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
        }

        <MudText Typo="Typo.body2">
            @if (ViewModel.FileManager.DownloadedCount > 0)
            {
                <span>You have</span>
                <span><b> @(ViewModel.FileManager.DownloadedCount) </b></span>
                <span> @(ViewModel.FileManager.DownloadedCount > 1 ? "models" : "model") </span>
                <span> taking up </span>
                <span><b> @(FileHelpers.FormatFileSize(ViewModel.FileManager.TotalModelSize))</b></span>
            }
            else
            {
                @if (ViewModel.FileManager.FileCollectingInProgress)
                {
                    <span>
                        Scanning for models...
                    </span>
                }
                else
                {
                    <p>
                        You don't have any model yet.
                        You may download some directly from the app, or add files to your model folder.
                    </p>
                }
            }
        </MudText>
    </div>

    <div id="model-list-container">
        @foreach (var model in ViewModel.ModelListViewModel.Models)
        {
            <ModelListItem ViewModel="model"
                           OpenInExplorerClicked="(() => ViewModel.OpenModelInExplorer(model))"
                           OpenHfLinkClicked="(() => ViewModel.OpenModelHfLink(model))"
                           DeleteClicked="(() => ViewModel.DeleteModel(model))" />
        }
    </div>

    <div class="bottom-space">
        <div id="hf-link" class="d-flex flex-row align-center gap-2">
            <img width="20" height="20" src="huggingface.svg" />
            <span class="hf-link">
                Explore more models
            </span>
        </div>
    </div>
</div>

<style>
    #model-page-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        gap: 20px;
        padding-block: 20px;
    }

    #model-folder-container {
        max-width: 400px;
        border-radius: 4px;
        border: 1px solid var(--Surface3);
        flex-grow: 1;
        padding: 4px;
    }

    #model-list-container {
        gap: 0px;
        display: block;
        overflow-y: auto;
        background-color: yellow;
        padding-block: 20px;
    }

    .bottom-space {
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    #hf-link {
        cursor: pointer;
        color: var(--Outline);
    }

        #hf-link:hover {
            color: #FFD21E;
        }

</style>

@code {
    private void OnDeleteClicked(ModelInfoViewModel modelInfoViewModel)
    {
        ViewModel.DeleteModel(modelInfoViewModel);
    }

    private void OnModelOpenInExplorerClicked(ModelInfoViewModel modelInfoViewModel)
    {
        ViewModel.OpenModelInExplorer(modelInfoViewModel);
    }

    private void OnModelOpenHfLinkClicked(ModelInfoViewModel modelInfoViewModel)
    {
        ViewModel.OpenModelInExplorer(modelInfoViewModel);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            ViewModel.ModelListViewModel.Models.CollectionChanged += OnModelCollectionChanged;
            ViewModel.FileManager.PropertyChanged += OnFileManagerPropertyChanged;
        }
    }

    private void OnFileManagerPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnModelCollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }
}
