@page "/chat"

@inject LMKitService LMKitService
@inject HttpClient Http
@inject IJSRuntime JS
@inject IScrollHandler ScrollHandler
@inject IResizeHandler ResizeHandler
@inject ILogger<Chat> Logger
@inject ISnackbar Snackbar
@inherits MvvmComponentBase<ChatPageViewModel>

<div id="chat-container">
    <div id="chats-sidebar"
         class="@(ViewModel.ChatsSidebarIsToggled ? "sidebar-show" : "sidebar-hide")">
        @foreach (var conversation in ViewModel.ConversationListViewModel.Conversations)
        {
            <div>
                <ConversationListItem
                    OnSelect="OnConversationItemSelected"
                    OnShowMore="OnConversationItemShowMoreClicked"
                    IsSelected="@(conversation == ViewModel.ConversationListViewModel.CurrentConversation)"
                    ViewModel="conversation"/>
                
                <MudPopover Open="@conversation.IsShowingActionPopup" Fixed="true" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudButton @onclick="() => OnConversationItemRenameClicked(conversation)"
                                   Class="ml-auto mr-n3 mb-1" Color="Color.Primary">Rename
                        </MudButton>
                        <MudButton @onclick="() => OnConversationItemSelected(conversation)" Class="ml-auto mr-n3 mb-1"
                                   Color="Color.Primary">Select
                        </MudButton>
                        <MudButton @onclick="() => OnConversationItemDeleteClicked(conversation)"
                                   Class="ml-auto mr-n3 mb-1" Color="Color.Error">Delete
                        </MudButton>
                    </div>
                </MudPopover>
            </div>
        }
    </div>

    <div id="chat-content">
        <div id="chat-messages"
             class="@(ViewModel.ConversationListViewModel.CurrentConversation is { IsEmpty: true } ? "centered-container" : "top-align-container")">
            @if (ViewModel?.ConversationListViewModel.CurrentConversation != null)
            {
                if (ViewModel.ConversationListViewModel.CurrentConversation.IsEmpty)
                {
                    <div id="empty-conversation" class="chat-element vertical-stack">
                        <div class="vertical-stack spacing-4">
                            <div class="welcome-message"><b>Maestro</b> at your service—let’s orchestrate something
                                amazing!
                            </div>
                            <div class="welcome-message">
                                Feel free to ask questions, explore ideas, or engage in meaningful conversations.

                            </div>
                            <div class="welcome-message">
                                Whether you need assistance, inspiration, or just some lighthearted chat, I'm here to
                                help.

                            </div>

                        </div>

                        <div class="vertical-stack" style="gap:12px;">
                            <div class="shortcut-instruction">
                                Press Enter to send a new message
                            </div>

                            <div class="shortcut-instruction">
                                Hold Shift + Enter to insert a new line
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div id="message-list" class="chat-element">
                        @foreach (var message in ViewModel.ConversationListViewModel.CurrentConversation.Messages)
                        {
                            <ChatMessage MessageViewModel="message"/>
                        }
                    </div>
                }
            }

            <div id="chat-info" class="chat-element">
                <div id="scroll-to-end">
                    @if (!IsScrolledToEnd)
                    {
                        <button @onclick="OnScrollToEndButtonClicked" class="round-button scroll-to-end-button">
                            <span>
                                <i class="fas fa-arrow-down"></i>
                            </span>
                        </button>
                    }
                </div>
            </div>
        </div>

        <div id="user-input" class="chat-element">
            <UserInput ViewModel="ViewModel!.ConversationListViewModel.CurrentConversation"/>
        </div>

        <div id="bottom-space">
            @if (ViewModel?.ConversationListViewModel?.CurrentConversation?.LMKitConversation?.ContextSize > 0)
            {
                <MudText Align="Align.Center" Typo="Typo.caption">
                    Tokens: @ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextUsedSpace /
                    @ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextSize
                    (@CalculateUsagePercentage(ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextUsedSpace,
                             ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextSize)%)
                </MudText>
            }
        </div>
    </div>

    <div id="settings-sidebar"
         class="@(ViewModel.SettingsSidebarIsToggled ? "sidebar-show" : "sidebar-hide")">
        <ChatSettings/>
    </div>
</div>
