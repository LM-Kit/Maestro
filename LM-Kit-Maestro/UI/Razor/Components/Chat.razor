    @page "/chat"

@inject LMKitService LMKitService
@inject HttpClient Http
@inject IJSRuntime JS
@inject IScrollHandler ScrollHandler
@inject IResizeHandler ResizeHandler
@inject ILogger<Chat> Logger

@inherits MvvmComponentBase<ChatPageViewModel>

<div id="chat-container">
    <div id="conversation-container">
        <div id="conversation-content"
             class="chat-element dark @(ViewModel.ConversationListViewModel.CurrentConversation is { IsEmpty: true } ? "centered-container" : "top-align-container")">
            @if (ViewModel?.ConversationListViewModel.CurrentConversation != null)
            {
                if (ViewModel.ConversationListViewModel.CurrentConversation.IsEmpty)
                {
                    <div id="empty-conversation" class="vertical-stack small-text">
                        <div class="vertical-stack spacing-4">
                            <div class="welcome-message">Hello, human.</div>
                            <div class="welcome-message">
                                It is likely that similar software programs are now assuming professional tasks that
                                were
                                previously your responsibility.
                            </div>
                            <div class="welcome-message">
                                Developers and other software programs are working to enhance my
                                ability to assist you in the process of making sense about this, or to generate witty
                                jokes
                                involving robots and humans.
                            </div>
                        </div>

                        <div class="vertical-stack" style="gap:12px;">
                            <div class="shortcut-instruction">
                                Press Enter to send a new message
                            </div>

                            <div class="shortcut-instruction">
                                Hold Shift + Enter to insert a new line
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div id="message-list">
                        @foreach (var message in ViewModel.ConversationListViewModel.CurrentConversation.Messages)
                        {
                            <ChatMessage MessageViewModel="message" />
                        }
                    </div>
                }
            }
        </div>

        <div id="chat-info" class="chat-element">
            <div id="scroll-to-end">
                @if (!IsScrolledToEnd)
                {
                    <button @onclick="OnScrollToEndButtonClicked" class="round-button scroll-to-end-button">
                        <span>
                            <i class="fas fa-arrow-down"></i>
                        </span>
                    </button>
                }
            </div>
        </div>
    </div>

    <div id="user-input" class="chat-element">
        <UserInput ViewModel="ViewModel!.ConversationListViewModel.CurrentConversation" />
    </div>

    <div id="bottom-space" style="margin-top: 0px; padding-top: 0px; position: relative; top: -30px;font-size: 15px;">
        @if (ViewModel?.ConversationListViewModel?.CurrentConversation?.LMKitConversation?.ContextSize > 0)
        {
            <text>
                Tokens: @ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextUsedSpace /
                @ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextSize
                (@CalculateUsagePercentage(ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextUsedSpace,
                        ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.ContextSize)%)
            </text>
        }
    </div>
</div>

@code
{
    private const int UIUpdateDelayMilliseconds = 50;

    private ConversationViewModel? _previousConversationViewModel;
    private MessageViewModel? _latestAssistantResponse;
    private bool _hasPendingScrollEnd;
    private bool _ignoreScrollsUntilNextScrollUp;
    private double? _previousScrollTop;
    private bool _shouldAutoScrollEnd;
    private double _scrollTop;

    private bool _isScrolledToEnd = false;

    public bool IsScrolledToEnd
    {
        get => _isScrolledToEnd;
        set
        {
            _isScrolledToEnd = value;

            if (_isScrolledToEnd &&
                ViewModel.ConversationListViewModel.CurrentConversation != null &&
                ViewModel.ConversationListViewModel.CurrentConversation!.AwaitingResponse)
            {
                // Assistant is currently generating a response, enforce auto-scroll.
                _shouldAutoScrollEnd |= true;
            }

            UpdateUIAsync();
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (ViewModel.ConversationListViewModel.CurrentConversation != null)
        {
            OnConversationSet();
        }

        ViewModel.ConversationListViewModel.PropertyChanged += OnConversationListViewModelPropertyChanged;

        ViewModel.ConversationListViewModel.CurrentConversation.LMKitConversation.PropertyChanged += OnLMKitConversationPropertyChanged;

        await ResizeHandler.RegisterPageResizeAsync(Resized);
        await JS.InvokeVoidAsync("initializeScrollHandler", DotNetObjectReference.Create(this));
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_hasPendingScrollEnd)
        {
            _hasPendingScrollEnd = false;
            await ScrollToEnd();
        }
    }

    private bool _refreshScheduled = false;

    private Task UpdateUIAsync(bool forceRedraw = false)
    {
        if (forceRedraw)
        {
            return InvokeAsync(() => StateHasChanged());
        }
        else
        {
            if (!_refreshScheduled)
            {
                _refreshScheduled = true;

                return InvokeAsync(async () =>
                {
                    await Task.Delay(UIUpdateDelayMilliseconds);
                    StateHasChanged();
                    _refreshScheduled = false;
                });
            }
        }

        return Task.CompletedTask;
    }

    private void OnConversationListViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ConversationListViewModel.CurrentConversation))
        {
            OnConversationSet();
        }
    }

    private void OnLMKitConversationPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(LMKitService.Conversation.ContextRemainingSpace))
        {
            UpdateUIAsync();
        }
        else if (e.PropertyName == nameof(LMKitService.Conversation.InTextCompletion))
        {
            UpdateUIAsync(forceRedraw: true);
        }
    }

    private void OnLatestAssistantMessagePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(MessageViewModel.Content))
        {
            OnLatestAssistantResponseProgressed();
        }
        else if (e.PropertyName == nameof(MessageViewModel.MessageInProgress))
        {
            if (sender == _latestAssistantResponse && !_latestAssistantResponse!.MessageInProgress && _shouldAutoScrollEnd)
            {
                Task.Run(async () =>
                {
                    // Note: Adding delay to sync with current UI behavior
                    // (show latest assistant response footer for 3 sec).
                    await Task.Delay(50);
                    await ScrollToEnd();
                });
            }
        }
    }

    private void OnConversationSet()
    {
        if (_previousConversationViewModel != null)
        {
            _previousConversationViewModel.Messages.CollectionChanged -= OnConversationMessagesCollectionChanged;
        }

        _previousConversationViewModel = ViewModel.ConversationListViewModel.CurrentConversation;

        if (ViewModel.ConversationListViewModel.CurrentConversation != null)
        {
            ViewModel.ConversationListViewModel.CurrentConversation.Messages.CollectionChanged += OnConversationMessagesCollectionChanged;
            _previousScrollTop = null;
            _ignoreScrollsUntilNextScrollUp = true;
            IsScrolledToEnd = true;

            // Awaiting for the component to be rendered before scrolling to bottom.
            _hasPendingScrollEnd = true;
        }
    }

    private async void OnConversationMessagesCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        await UpdateUIAsync(forceRedraw: true);

        await ScrollToEnd();

        var latestMessage = ViewModel.ConversationListViewModel.CurrentConversation!.Messages.LastOrDefault();

        if (latestMessage != null && latestMessage.Sender == MessageSender.Assistant && latestMessage.MessageInProgress)
        {
            _latestAssistantResponse = latestMessage;
            _shouldAutoScrollEnd = true;
            latestMessage.PropertyChanged += OnLatestAssistantMessagePropertyChanged;
        }
    }

    private async void OnLatestAssistantResponseProgressed()
    {
        if (_shouldAutoScrollEnd)
        {
            await ScrollToEnd();
        }
    }

    private async Task Resized(ResizeEventArgs args)
    {
        if (IsScrolledToEnd)
        {
            await ScrollToEnd();
        }
        else
        {
            await CheckIsScrolledToEnd();
        }
    }

    private async Task ScrollToEnd(bool smooth = false)
    {
        IsScrolledToEnd = true;
        _ignoreScrollsUntilNextScrollUp = true;

        await JS.InvokeVoidAsync("scrollToEnd", smooth);
    }

    private async Task CheckIsScrolledToEnd()
    {
        var viewHeight = await JS.InvokeAsync<double>("getConversationViewHeight");
        var chatContentHeight = await JS.InvokeAsync<double>("getScrollHeight");

        var value = chatContentHeight - viewHeight - _scrollTop;
        IsScrolledToEnd = Math.Abs(chatContentHeight - viewHeight - _scrollTop) < 5 || chatContentHeight <= viewHeight;
    }

    public async Task OnScrollToEndButtonClicked()
    {
        await ScrollToEnd(true);
    }

    public void OnSubmit()
    {
        ViewModel.ConversationListViewModel.CurrentConversation!.Submit();
    }

    private int CalculateUsagePercentage(int used, int total)
    {
        if (total == 0) return 0;
        return (int)(100 * used / total);
    }


    [JSInvokable]
    public async Task OnConversationContainerScrolled(double scrollTop)
    {
        _scrollTop = scrollTop;

        bool shouldCheckIsScrolledToEnd = true;
        bool? isScrollUp = null;

        if (_previousScrollTop != null)
        {
            isScrollUp = scrollTop < _previousScrollTop;

            if (isScrollUp.Value && _shouldAutoScrollEnd)
            {
                _shouldAutoScrollEnd = false;
            }
        }

        if (_ignoreScrollsUntilNextScrollUp)
        {
            if (isScrollUp == null || !isScrollUp.Value)
            {
                shouldCheckIsScrolledToEnd = false;
            }
            else
            {
                _ignoreScrollsUntilNextScrollUp = false;
            }
        }

        if (shouldCheckIsScrolledToEnd)
        {
            await CheckIsScrolledToEnd();
        }

        _previousScrollTop = _scrollTop;
    }
}