@inherits ComponentBase

<div id="settings-container">
    <Expander Title="General settings">
        <MudStack Class="pa-2" Spacing="6">
            <div class="d-flex flex-column gap-2">

                <div class="d-flex flex-row justify-content-around">

                    <MudText Typo="Typo.overline">
                        Chatbot purpose
                    </MudText>

                    @if (ViewModel.SystemPrompt != LMKitDefaultSettings.DefaultSystemPrompt)
                    {
                        <IconButton Style="IconButton.ButtonStyle.Icon"
                                    Icon="fas fa-rotate-left"
                                    OnClick="OnResetSystemPromptClicked" />
                    }

                </div>

                <MudTextField Variant="Variant.Outlined"
                              @onfocusout="OnChatbotPurposeInputFocusOut"
                              Style="--mud-palette-primary: var(--Secondary)"
                              Typo="Typo.caption"
                              Lines="5"
                              @bind-Value="ChatbotPurposeInput" />
            </div>

            <div class="d-flex justify-content-between align-center">
                <div class="d-flex align-center flex-grow-1 overflow-hidden">
                    <MudText Typo="Typo.overline" Class="text-truncate">Limit response length</MudText>
                    <MudSwitch UncheckedColor="Color.Secondary" Color="Color.Secondary" Ripple="false" Size="Size.Small"
                               @bind-Value="LimitRespongeLength" />
                </div>

                <div class="flex-shrink-0">
                    @if (LimitRespongeLength)
                    {
                        <NumericTextField @bind-Value="ViewModel.MaximumCompletionTokens" MinValue="1" MaxValue="2048" />
                    }
                </div>
            </div>

            @if (LimitRespongeLength)
            {
                <div>
                    <MudText Class="text-truncate"
                             Typo="Typo.overline">
                        Maximum number of tokens
                    </MudText>

                    <MudSlider @bind-Value="ViewModel.MaximumCompletionTokens"
                               Min="1"
                               Max="2048"
                               Color="Color.Secondary" />
                </div>
            }

            <NumericSetting @bind-Value="ViewModel.RequestTimeout"
                            Title="Request timeout (sec)"
                            MinValue="10"
                            MaxValue="120" />

            <NumericSetting @bind-Value="ViewModel.ContextSize"
                            Title="Context size"
                            MinValue="512"
                            MaxValue="32768" />
        </MudStack>
    </Expander>
    <MudDivider />

    <Expander Title="Sampling configuration">
        <MudStack Class="pa-2" Spacing="6">
            <div class="d-flex flex-row justify-space-between align-center">
                <MudText Class="text-truncate"
                         Typo="Typo.overline">
                    Sampling mode
                </MudText>

                <MudSpacer />

                <MudSelect Typo="Typo.caption"
                           Adornment="Adornment.None"
                           @bind-Value="ViewModel.SamplingMode"
                           Style="--mud-palette-primary: var(--Secondary)">
                    @foreach (var value in Enum.GetValues<SamplingMode>())
                    {
                        <MudSelectItem Style="--mud-palette-primary: var(--Secondary)" Value="@value">
                            <MudText Typo="Typo.overline">
                                @value
                            </MudText>
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>

            @if (ViewModel.SamplingMode == SamplingMode.Random)
            {
                <NumericSetting @bind-Value="ViewModel.RandomSamplingSettings.Temperature"
                                Title="Temperature"
                                MinValue="0"
                                MaxValue="1" />

                <NumericSetting @bind-Value="ViewModel.RandomSamplingSettings.DynamicTemperatureRange"
                                Title="Dynamic temperature range"
                                MinValue="0"
                                MaxValue="1" />

                <NumericSetting @bind-Value="ViewModel.RandomSamplingSettings.TopP"
                                Title="Top P"
                                MinValue="0"
                                MaxValue="1" />

                <NumericSetting @bind-Value="ViewModel.RandomSamplingSettings.TopK"
                                Title="Top K"
                                MinValue="1"
                                MaxValue="1000" />

                <NumericSetting @bind-Value="ViewModel.RandomSamplingSettings.LocallyTypical"
                                Title="Locally typical"
                                MinValue="0"
                                MaxValue="1" />
            }
            else if (ViewModel.SamplingMode == SamplingMode.Mirostat2)
            {
                <NumericSetting @bind-Value="ViewModel.Mirostat2SamplingSettings.Temperature"
                                Title="Temperature"
                                MinValue="0"
                                MaxValue="1" />

                <NumericSetting @bind-Value="ViewModel.Mirostat2SamplingSettings.TargetEntropy"
                                Title="Target entropy"
                                MinValue="0"
                                MaxValue="10" />

                <NumericSetting @bind-Value="ViewModel.Mirostat2SamplingSettings.LearningRate"
                                Title="Learning rate"
                                MinValue="0"
                                MaxValue="1" />
            }

        </MudStack>
    </Expander>
    <MudDivider />
</div>

@code
{
    [Parameter] public SettingsViewModel ViewModel { get; set; }

    private int? _previousTokenLimit;

    private bool _limitResponseLength = false;

    bool LimitRespongeLength
    {
        get => _limitResponseLength;
        set
        {
            if (_limitResponseLength != value)
            {
                _limitResponseLength = value;
                InvokeAsync(() => StateHasChanged());

                if (!value)
                {
                    _previousTokenLimit = ViewModel.MaximumCompletionTokens;
                    ViewModel.MaximumCompletionTokens = -1;
                }
                else
                {
                    if (ViewModel.MaximumCompletionTokens == -1)
                    {
                        ViewModel.MaximumCompletionTokens = _previousTokenLimit != null ? _previousTokenLimit.Value : 2048;
                    }
                }
            }
        }
    }

    private string _chatbotPurposeInput = "";

    private string ChatbotPurposeInput
    {
        get => _chatbotPurposeInput;
        set
        {
            if (_chatbotPurposeInput != value)
            {
                _chatbotPurposeInput = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        LimitRespongeLength = ViewModel.MaximumCompletionTokens != -1;
        ChatbotPurposeInput = ViewModel.SystemPrompt;
    }

    private void OnChatbotPurposeInputFocusOut()
    {
        if (!string.IsNullOrWhiteSpace(ChatbotPurposeInput))
        {
            ViewModel.SystemPrompt = ChatbotPurposeInput.Trim();
        }

        ChatbotPurposeInput = ViewModel.SystemPrompt;
    }

    private void OnResetSystemPromptClicked()
    {
        ViewModel.ResetSystemPrompt();
        ChatbotPurposeInput = ViewModel.SystemPrompt;
    }
}