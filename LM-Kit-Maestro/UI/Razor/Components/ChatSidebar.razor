@inherits ComponentBase
@inject IJSRuntime JS

<div @ref="SidebarContainer"
    class="@GetClasses()">
    @if (Position == SidebarPosition.Right)
    {
        <div class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }

    <div class=" sidebar-content scrollable @(ShowScrollbar ? "hover-scrollable" : "no-scrollbar")">
        @ChildContent
    </div>

    @if (Position == SidebarPosition.Left)
    {
        <div class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }
</div>

@code
{
    [Parameter] public bool IsToggled { get; set; }
    [Parameter] public EventCallback<bool> IsToggledChanged { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowScrollbar { get; set; }
    [Parameter] public bool Resizable { get; set; }
    [Parameter] public required SidebarPosition Position { get; set; }

    private ElementReference SidebarContainer;

    private string GetClasses()
    {
        return $"sidebar-container {(IsToggled ? "sidebar-toggled" : "sidebar-hidden")} {(Resizable ? "resizable-sidebar" : "fixed-sidebar")}";
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && Resizable)
        {
            await JS.InvokeVoidAsync("initSidebarResizeHandler", SidebarContainer, Position.ToString());
        }
    }

    public enum SidebarPosition
    {
        Left,
        Right
    }
}