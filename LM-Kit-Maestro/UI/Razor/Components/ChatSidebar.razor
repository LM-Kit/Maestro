@inherits ComponentBase
@inject IJSRuntime JS

<div @ref="SidebarContainer"
style="width: @(Width)px;" 
class="@GetClasses()">
    @if (Position == SidebarPosition.Right)
    {
        <div class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }

    <div class="sidebar-content scrollable @(ShowScrollbar ? "hover-scrollable" : "no-scrollbar")">
        @ChildContent
    </div>

    @if (Position == SidebarPosition.Left)
    {
        <div class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }
</div>

@code
{
    [Parameter] public EventCallback<bool> IsToggledChanged { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowScrollbar { get; set; }
    [Parameter] public bool Resizable { get; set; }
    [Parameter] public required SidebarPosition Position { get; set; }

    private bool _isToggled;

    [Parameter]
    public bool IsToggled
    {
        get => _isToggled;
        set
        {
            if (value != _isToggled)
            {
                _isToggled = value;
                IsToggledChanged.InvokeAsync(value);
                Width = IsToggled ? 300 : 0;
                StateHasChanged();
            }
        }
    }

    private int _width;
    private int Width
    {
        get => _width;
        set
        {
            if (value != _width)
            {
                _width = value;
                StateHasChanged();
            }
        }
    }

    private ElementReference SidebarContainer;

    private string GetClasses()
    {
        return $"sidebar-container {(IsToggled ? "sidebar-toggled" : "sidebar-hidden")} {(Resizable ? "resizable-sidebar" : "fixed-sidebar")}";
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (Resizable)
            {
                await JS.InvokeVoidAsync("initSidebarResizeHandler", DotNetObjectReference.Create(this), SidebarContainer, Position.ToString());
            }
        }
    }

    [JSInvokable]
    public void ToggleSidebar(bool value)
    {
        IsToggled = value;
        StateHasChanged();
    }

    [JSInvokable]
    public bool CheckIsToggled()
    {
        return IsToggled;
    }

    public enum SidebarPosition
    {
        Left,
        Right
    }
}