@inherits ComponentBase
@inject IJSRuntime JS

<div @ref="SidebarContainer"
    @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"

     style="width: @(Width)px;" 
    class="@GetClasses()">
    @if (Position == SidebarPosition.Right)
    {
        <div @onmousedown="OnMouseDown" class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }

    <div class="sidebar-content scrollable @(ShowScrollbar ? "hover-scrollable" : "no-scrollbar")">
        @ChildContent
    </div>

    @if (Position == SidebarPosition.Left)
    {
            <div @onmousedown="OnMouseDown" class="@(Resizable ? "resize-handle" : "v-separator")"></div>
    }
</div>

<script>

</script>

@code
{
    [Parameter] public EventCallback<bool> IsToggledChanged { get; set; }
    [Parameter] public EventCallback<int> WidthChanged { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowScrollbar { get; set; }
    [Parameter] public bool Resizable { get; set; }
    [Parameter] public required SidebarPosition Position { get; set; }

    private bool _isToggled;
    [Parameter]
    public bool IsToggled
    {
        get => _isToggled;
        set
        {
            if (value != _isToggled)
            {
                _isToggled = value;
                IsToggledChanged.InvokeAsync(value);
                Width = IsToggled ? 300 : 0;
                StateHasChanged();
            }
        }
    }

    private int _width;
    [Parameter]
    public int Width
    {
        get => _width;
        set
        {
            if (value != _width)
            {
                _width = value;
                WidthChanged.InvokeAsync(value);
                StateHasChanged();
            }
        }
    }

    private ElementReference SidebarContainer;

    private string GetClasses()
    {
        return $"sidebar-container {(IsToggled ? "sidebar-toggled" : "sidebar-hidden")} {(Resizable ? "resizable-sidebar" : "fixed-sidebar")}";
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (Resizable)
            {
                await JS.InvokeVoidAsync("initSidebarResizeHandler", DotNetObjectReference.Create(this), SidebarContainer, Position.ToString());
            }
        }
    }

    [JSInvokable]
    public void ToggleSidebar(bool value)
    {
        IsToggled = value;
        StateHasChanged();
    }

    [JSInvokable]
    public bool CheckIsToggled()
    {
        return IsToggled;
    }


    private bool IsResizing { get; set; } = false;
    private int StartX { get; set; }
    private int StartWidth { get; set; }

    private void OnMouseDown(MouseEventArgs e)
    {
        // IsResizing = true;
        // StartX = (int)e.ClientX;
        // StartWidth = SidebarWidth;
    }

    private async void OnMouseMove(MouseEventArgs e)
    {
        // if (IsResizing)
        // {
        //     var rect = await JS.InvokeAsync<DOMRect>("getElementRect", SidebarContainer);
        //     rectInfo = $"X: {rect.X}, Y: {rect.Y}, Width: {rect.Width}, Height: {rect.Height}";

        //     int newWidth = StartWidth + ((int)e.ClientX - StartX);
        //     Width = Math.Max(150, Math.Min(500, newWidth));
        // }
    }

    private void OnMouseUp()
    {
        IsResizing = false;
    }

    public enum SidebarPosition
    {
        Left,
        Right
    }
}