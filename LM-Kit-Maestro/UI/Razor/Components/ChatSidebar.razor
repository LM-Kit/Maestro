@inherits ComponentBase
@inject IJSRuntime JS

<div @ref="SidebarContainer"
style="width: @(Width)px;"
class="@GetClasses()">
    @if (Position == SidebarPosition.Right)
    {
        <div @onmousedown="OnResizeHandlerMouseDown" 
        @onmousedown:preventDefault="true"  
        @onmousedown:stopPropagation="true"
        class="@(Resizable ? "resize-handle" : "v-separator")">
            @if (Resizable)
            {
                <div class="v-separator"></div>
            }
    </div>
    }

    <div class="sidebar-content scrollable @(ShowScrollbar ? "hover-scrollable" : "no-scrollbar")">
        @ChildContent
    </div>

    @if (Position == SidebarPosition.Left)
    {
        <div @onmousedown="OnResizeHandlerMouseDown"
        @onmousedown:preventDefault="true"  
        @onmousedown:stopPropagation="true"
        class="@(Resizable ? "resize-handle" : "v-separator")">
            @if (Resizable)
            {
                <div class="v-separator"></div>
            }
        </div>
    }
</div>

@code
{
    private bool _isResizing;
    private int _resizeStartX;
    private int _resizeStartWidth;

    [Parameter] public EventCallback<bool> IsToggledChanged { get; set; }
    [Parameter] public EventCallback<int> WidthChanged { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowScrollbar { get; set; }
    [Parameter] public bool Resizable { get; set; }
    [Parameter] public required SidebarPosition Position { get; set; }

    private bool _isToggled;
    [Parameter]
    public bool IsToggled
    {
        get => _isToggled;
        set
        {
            if (value != _isToggled)
            {
                _isToggled = value;
                IsToggledChanged.InvokeAsync(value);
                Width = IsToggled ? 300 : 0;
                StateHasChanged();
            }
        }
    }

    private int _width;
    [Parameter]
    public int Width
    {
        get => _width;
        set
        {
            if (value != _width)
            {
                _width = value;
                WidthChanged.InvokeAsync(value);
                StateHasChanged();
            }
        }
    }

    private ElementReference SidebarContainer;

    private string GetClasses()
    {
        return $"sidebar-container {(IsToggled ? "sidebar-toggled" : "sidebar-hidden")} {(Resizable ? "resizable-sidebar" : "fixed-sidebar")}";
    }

    [JSInvokable]
    public void ToggleSidebar(bool value)
    {
        IsToggled = value;
        StateHasChanged();

    }

    [JSInvokable]
    public bool CheckIsToggled()
    {
        return IsToggled;
    }



    private async Task OnResizeHandlerMouseDown(MouseEventArgs e)
    {
        _isResizing = true;
        _resizeStartX = (int)e.ClientX;
        _resizeStartWidth = Width;
        Debug.WriteLine("[down]");

        await JS.InvokeVoidAsync("attachResizeListeners", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnMouseMove(MouseEventArgs e)
    {
        if (_isResizing)
        {
            int requestedWidth = _resizeStartWidth + (int)(_resizeStartX - e.ClientX);

            if (requestedWidth < 80)
            {
                IsToggled = false;
            }
            else
            {
                if (!IsToggled)
                {
                    IsToggled = requestedWidth > 80;
                }

                if (IsToggled)
                {
                    Width = Math.Max(150, Math.Min(400, requestedWidth));
                }
            }
        }

        Debug.WriteLine("[move] " + _isResizing);
    }

    [JSInvokable]
    public void OnMouseUp()
    {
        Debug.WriteLine("[released]");
        _isResizing = false;

    }

    public enum SidebarPosition
    {
        Left,
        Right
    }
}