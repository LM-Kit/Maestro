@inject IJSRuntime JS
@inject ISnackbar Snackbar

<div id="input-border">
    <div id="input-textarea-wrapper" class="input-textarea-initial">

        <textarea rows="1"
        id="input-text"
        @bind="ViewModel.InputText"
        @onkeydown="OnKeyDown"
        @bind:event="oninput" />

    </div>
    <div class="send-button-container">

        <button disabled="@(!ViewModel.AwaitingResponse && !CanSubmit)" @onclick="OnSubmitButtonClicked"
        class="send-button @(CanSubmit || ViewModel.AwaitingResponse ? "enabled-button" : "disabled-button")">

            @if (!ViewModel.AwaitingResponse)
            {
                <span>
                    <i class="fas fa-paper-plane"></i>
                </span>
            }
            else
            {
                <span>
                    <i class="fas fa-stop"></i>
                </span>
            }
        </button>
    </div>
</div>

<script>
    document.getElementById('input-text').addEventListener('keydown', function (e) {
    if (e.key == 'Enter' && !e.shiftKey) {
    // prevent default behavior
    e.preventDefault();
    return false;
    }
    }, false);
</script>

@code
{
    private bool _shouldResizeTextarea;

    bool _canSubmit;

    private bool CanSubmit
    {
        get => _canSubmit;
        set
        {
            if (_canSubmit != value)
            {
                _canSubmit = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public required AssistantViewModelBase ViewModel { get; set; }

    [Parameter] public EventCallback<AssistantViewModelBase> ViewModelChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //     await inputTextArea.FocusAsync();
        //     await JS.InvokeVoidAsync("setUserInputFocus");
        // }

        if (_shouldResizeTextarea)
        {
            _shouldResizeTextarea = false;
            await JS.InvokeVoidAsync("resizeUserInput");
        }
    }

    private async Task OnSubmitButtonClicked()
    {
        if (!ViewModel.AwaitingResponse)
        {
            if (CanSubmit)
            {
                Submit();
            }
        }
        else
        {
            await ViewModel.Cancel();
        }
    }

    private void OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!keyboardEventArgs.ShiftKey && CanSubmit)
            {
                Submit();
            }
        }
    }

    private void Submit()
    {
        if (ViewModel.LmKitService.ModelLoadingState != LMKitModelLoadingState.Loaded)
        {
            Snackbar.Add(Locales.NoModelLoaded, Severity.Info);
        }
        else
        {
            ViewModel.Submit();
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void OnViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AssistantViewModelBase.InputText))
        {
            // Resize the textarea whenever the input text changes.
            _shouldResizeTextarea = true;
        }

        CanSubmit = !string.IsNullOrWhiteSpace(ViewModel.InputText) && !ViewModel.AwaitingResponse;
    }
}
