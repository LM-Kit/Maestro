@inject IJSRuntime JS

<div id="inputbox-container">
    <textarea id="input-box"
              readonly=@Readonly
              @bind="InputText"
              @bind:event="oninput"
              placeholder="@Placeholder" />
</div>

<style>
    #input-box {
        color: white;
        background-color: transparent;
        overflow: hidden;
    }

    textarea {
        width: 100%;
        height: 100%;
        resize: none;
        padding: 10px;
        font-size: 16px;
        border-radius: 0;
        box-sizing: border-box;
        border: none;
    }

    textarea:focus{
        outline: none;
    }

        /* textarea:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
        } */
</style>

<script>
    function resizeUserInput() {
    const inputbox = document.getElementById('input-box');
    inputbox.style.height = "";
    inputbox.style.height = inputbox.scrollHeight + "px";
    }
</script>

@code {
    private bool _shouldResizeTextarea;

    [Parameter] public string? Placeholder { get; set; }

    [Parameter] public bool Readonly { get; set; }

    [Parameter] public EventCallback<bool> ReadonlyChanged { get; set; }

    [Parameter] public EventCallback<string> InputTextChanged { get; set; }

    [Parameter] public EventCallback<string?> PlaceholderChanged { get; set; }

    private string _inputText = "";

    [Parameter]
    public string InputText
    {
        get => _inputText;
        set
        {
            if (_inputText != value)
            {
                _shouldResizeTextarea = true;
                _inputText = value;
                InputTextChanged.InvokeAsync(value);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldResizeTextarea)
        {
            _shouldResizeTextarea = false;
            await JS.InvokeVoidAsync("resizeUserInput");
        }
    }
}