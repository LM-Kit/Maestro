<div class="model-card @(GetClasses())" title="@ViewModel.ModelInfo.Description">
    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText Typo="Typo.subtitle2" Class="text-truncate">
                        @ViewModel.ModelInfo.ShortModelName
                    </MudText>

                    <div class="dot @(GetScoreClass(ViewModel.CompatibilityLevel))"
                         title="@string.Format("Estimated performance level of the model on this machine is {0:P0}", ViewModel.CompatibilityLevel)">
                    </div>
                </MudStack>

            </MudStack>
        </MudItem>

        <MudItem xs="3" Class="d-flex align-items-center">
            <MudStack AlignItems="AlignItems.Center" Row="true">
                <MudText Typo="Typo.overline" Class="outline text-truncate">
                    @Helpers.FileHelpers.FormatFileSize(ViewModel.ModelInfo.FileSize)
                </MudText>

                <MudIcon Class="outline xs-icon"
                         Icon="@(ViewModel.IsLocallyAvailable ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Cloud)"
                         Color="Color.Dark"
                         Size="Size.Small"/>
            </MudStack>
        </MudItem>

        <MudItem xs="9">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceAround" Row="true" Class="outline">
                <MudText
                    title="@string.Format("The architecture of this model is {0}", ViewModel.ModelInfo.Architecture)"
                    Typo="Typo.overline" Class="text-truncate">
                    @ViewModel.ModelInfo.Architecture
                </MudText>

                <MudText title="@string.Format("This model has {0:N0} parameters", ViewModel.ModelInfo.ParameterCount)"
                         Typo="Typo.overline" Class="text-truncate">
                    @ViewModel.ModelSize
                </MudText>

                <MudText
                    title="@string.Format("This model supports a maximum context length of {0:N0} tokens", ViewModel.ModelInfo.ContextLength)"
                    Typo="Typo.overline" Class="text-truncate">
                    @($"{ViewModel.MaxContextLengthKB}k")
                </MudText>

                <MudText
                    title="@string.Format("This model uses {0}-bit precision, which indicates the number of bits used for numerical representation", ViewModel.Precision)"
                    Typo="Typo.overline" Class="text-truncate">
                    @ViewModel.Precision
                </MudText>

                <MudStack Spacing="1" AlignItems="AlignItems.Center" Row="true">
                    @if (ViewModel.IsChatModel)
                    {
                        <MudIcon title="@Locales.ChatModelOptimized" Color="Color.Secondary"
                                 Icon="@Icons.Material.Outlined.Message"
                                 Size="Size.Small"/>
                    }

                    @if (ViewModel.HasVisionCapability)
                    {
                        <MudIcon title="@Locales.VisionModelOptimized" Color="Color.Secondary"
                                 Icon="@Icons.Material.Outlined.Visibility"
                                 Size="Size.Small"/>
                    }

                    @if (ViewModel.IsCodeModel)
                    {
                        <MudIcon title="@Locales.CodeCompletionModelOptimized" Color="Color.Secondary"
                                 Icon="@Icons.Material.Outlined.Code"
                                 Size="Size.Small"/>
                    }

                    @if (ViewModel.IsMathModel)
                    {
                        <MudIcon title="@Locales.MathModelOptimized" Color="Color.Secondary"
                                 Icon="@Icons.Material.Outlined.Calculate"
                                 Size="Size.Small"/>
                    }
                </MudStack>
            </MudStack>
        </MudItem>
    </MudGrid>
</div>

@code {
    [Parameter] public required ModelInfoViewModel ViewModel { get; set; }

    private bool _dense;

    [Parameter]
    public bool Dense
    {
        get => _dense;
        set
        {
            if (value != _dense)
            {
                _dense = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private bool _selectable;

    [Parameter]
    public bool Selectable
    {
        get => _selectable;
        set
        {
            if (value != _selectable)
            {
                _selectable = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private bool _isFocused;

    [Parameter]
    public bool IsFocused
    {
        get => _isFocused;
        set
        {
            if (value != _isFocused)
            {
                _isFocused = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private string GetClasses()
    {
        string classes = "";

        if (Dense)
        {
            classes += "model-card-dense";
        }

        if (Selectable)
        {
            classes += " model-card-selectable";
        }

        if (IsFocused)
        {
            classes += " model-card-focused";
        }

        return classes.TrimStart();
    }

    private static string GetScoreClass(float score)
    {
        return score < 0.4 ? "score-1" : score < 0.7 ? "score-2" : "score-3";
    }

}