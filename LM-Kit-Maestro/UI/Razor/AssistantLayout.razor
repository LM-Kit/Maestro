@inherits LayoutComponentBase

@inject ModelListViewModel ModelListViewModel
@inject ILLMFileManager FileManager
@inject LMKitService LmKitService
@inject ISnackbar Snackbar


<div id="main-container">
    <div id="top-bar">
        <nav id="nav-bar">
            <div class="nav-item px-3">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="chat" Match="NavLinkMatch.All">
                    <MudText Typo="Typo.overline">
                        Chat
                    </MudText>

                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="models">
                    <MudText Typo="Typo.overline">
                        Models
                    </MudText>
                </NavLink>
            </div>
        </nav>

        <div id="page-top-bar">
            <SectionOutlet SectionName="top-bar" />
        </div>
        <div class="bottom-divider"> </div>
    </div>

    <div id="body-container">
        @Body
    </div>
</div>

<style>
    #main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    #nav-bar {
        display: flex;
        flex-direction: row;
        margin-block: 20px;
    }

    #top-bar {
        display: flex;
        flex-direction: column;
        background-color: var(--Surface);
    }

    .nav-link {
        font-size: 1.2rem !important;
        color: var(--Outline);
        transition: color 0.2s;
    }

    .nav-link-active {
        color: var(--Primary);
    }

    #page-top-bar {
        min-height: 96px;
        display: flex;
        flex-direction: column;
        position: relative;
        flex-grow: 1;
        gap: 20px;
    }

    #body-container {
        flex: 1;
        overflow: hidden;
    }
</style>

<MudThemeProvider IsDarkMode="true" DefaultScrollbar="true" Theme="@CurrentTheme" />
<MudPopoverProvider />
<MudSnackbarProvider />

<MudDialogProvider FullWidth="true"
                   CloseButton="true"
                   BackdropClick="true"
                   NoHeader="true"
                   Position="DialogPosition.TopLeft"
                   CloseOnEscapeKey="true" />

@code {
    public MudTheme CurrentTheme { get; private set; } = UIConstants.MaestroTheme;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            FileManager.FileCollectingCompleted += OnFileManagerFileCollectingCompleted;
            LmKitService.ModelLoadingFailed += OnModelLoadingFailed;
        }
    }

    private void OnFileManagerFileCollectingCompleted(object? sender, EventArgs e)
    {
        var fileCollectingCompletedEventArgs = (LLMFileManager.FileCollectingCompletedEventArgs)e;

        if (!fileCollectingCompletedEventArgs.Success && fileCollectingCompletedEventArgs.Exception != null)
        {
            Snackbar.Clear();
            Snackbar.Add("Error with your model folder");
            // _popupService!.DisplayAlert("Error with your model folder",
            //     $"Model files failed to be collected from the input folder:\n{fileCollectingCompletedEventArgs.Exception.Message!}\n\nYour model folder has been reset to the default one.",
            //     "OK");

        }
        else
        {
            Snackbar.Clear();
            Snackbar.Add("Model scan completed.");
        }
    }

    private void OnModelLoadingFailed(object? sender, EventArgs e)
    {
        var modelLoadingFailedEventArgs = (LMKitService.ModelLoadingFailedEventArgs)e;

        if (Microsoft.Maui.ApplicationModel.MainThread.IsMainThread)
        {
            // _popupService.DisplayAlert("Error loading model", $"The model failed to be loaded: {modelLoadingFailedEventArgs.Exception.Message}", "OK");
        }
    }
}