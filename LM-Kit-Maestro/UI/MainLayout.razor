@inherits LayoutComponentBase

@inject ModelListViewModel ModelListViewModel
@inject ILLMFileManager FileManager
@inject LMKitService LmKitService
@inject ISnackbar Snackbar
@inject Maestro.Services.ISnackbarService SnackbarService
@inject IDialogService DialogService

<div id="app-root">
    <div id="app-bar">
        <nav id="nav-bar">
            <div class="nav-item" title="Chat">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="chat" Match="NavLinkMatch.All">
                    <MudIcon Icon="@Icons.Material.Filled.ChatBubbleOutline" />
                </NavLink>
            </div>

            <div class="nav-item" title="Models">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="models">
                    <MudIcon Icon="@Icons.Material.Filled.FolderOpen" />
                </NavLink>
            </div>
        </nav>
    </div>

    <hr class="vertical-divider" />
    <div id="main-container">
        <hr class="horizontal-divider" />
        <div id="top-bar">
            <SectionOutlet SectionName="top-bar" />
        </div>
        <hr class="horizontal-divider" />

        <div id="body-container">
            @Body
        </div>
    </div>
</div>

<SnackbarComponent />
<MudThemeProvider IsDarkMode="true" DefaultScrollbar="true" Theme="@CurrentTheme" />
<MudPopoverProvider />
<MudSnackbarProvider />

<MudDialogProvider FullWidth="true"
                   CloseButton="false"
                   BackdropClick="true"
                   NoHeader="true"
                   Position="DialogPosition.TopLeft"
                   CloseOnEscapeKey="true" />

@code {
    public MudTheme CurrentTheme { get; private set; } = UIConstants.MaestroTheme;
}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            FileManager.FileCollectingCompleted += OnFileManagerFileCollectingCompleted;
            LmKitService.ModelLoadingFailed += OnModelLoadingFailed;
        }
    }

    private void OnFileManagerFileCollectingCompleted(object? sender, EventArgs e)
    {
        var fileCollectingCompletedEventArgs = (LLMFileManager.FileCollectingCompletedEventArgs)e;

        if (!fileCollectingCompletedEventArgs.Success && fileCollectingCompletedEventArgs.Exception != null)
        {
            SnackbarService.Show("Error with your model folder", $"{fileCollectingCompletedEventArgs.Exception.Message!}");
        }
        // else
        // {
        //     Snackbar.Clear();
        //     Snackbar.Add("Model scan completed.");
        // }
    }

    private void OnModelLoadingFailed(object? sender, EventArgs e)
    {
        var modelLoadingFailedEventArgs = (LMKitService.ModelLoadingFailedEventArgs)e;

