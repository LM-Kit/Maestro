@inherits LayoutComponentBase

@inject ModelListViewModel ModelListViewModel
@inject ILLMFileManager FileManager
@inject LMKitService LmKitService
@inject ISnackbar Snackbar
@inject Maestro.Services.ISnackbarService SnackbarService
@inject IDialogService DialogService

<div id="app-root">
    <div id="app-bar">
        <nav id="nav-bar">
            <div class="nav-item">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="chat" Match="NavLinkMatch.All">
                    <MudIcon Icon="@Icons.Material.Filled.ChatBubbleOutline" />
                </NavLink>
            </div>
            
            <div class="nav-item">
                <NavLink ActiveClass="nav-link-active" class="nav-link" href="models">
                    <MudIcon Icon="@Icons.Material.Filled.FolderOpen" />
                </NavLink>
            </div>
        </nav>

        <div class="d-flex justify-center">
            <button class="model-downloads-button" @onclick="ModelDownloadButtonClicked">
                @if (ModelListViewModel.IsDownloading)
                {
                    <MudBadge Dot="true" Color="Color.Info" Class="mx-6 my-4">
                        <span>
                            <i class="fas fa-download"></i>
                        </span>
                    </MudBadge>
                }
                else
                {
                    <span>
                        <i class="fas fa-download"></i>
                    </span>
                }
            </button>
        </div>
    </div>

    <hr class="vertical-divider" />
    <div id="main-container">
        <div id="top-bar">
            <hr class="horizontal-divider" />
            <div id="page-top-bar">
                <div id="page-top-bar-wrapper">
                    <SectionOutlet SectionName="top-bar" />
                </div>
            </div>

            <hr class="horizontal-divider" />
        </div>

        <div id="body-container">
            @Body
        </div>
    </div>
</div>

<SnackbarComponent />
<MudThemeProvider IsDarkMode="true" DefaultScrollbar="true" Theme="@CurrentTheme" />
<MudPopoverProvider />
<MudSnackbarProvider />

<MudDialogProvider FullWidth="true"
CloseButton="false"
BackdropClick="true"
NoHeader="true"
Position="DialogPosition.TopLeft"
CloseOnEscapeKey="true" />

@code {
    public MudTheme CurrentTheme { get; private set; } = UIConstants.MaestroTheme;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ModelListViewModel.PropertyChanged += OnModelListViewModelPropertyChanged;
        }
    }

    private void OnModelListViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName ==nameof(ModelListViewModel.IsDownloading))
        {
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async void ModelDownloadButtonClicked()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                FullScreen = false,
                Position = DialogPosition.BottomLeft
            };

        var dialog = await DialogService.ShowAsync<ModelDownloadDialog>(null, options);

        var result = await dialog.Result;
    }
}



