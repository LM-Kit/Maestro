@inherits ComponentBase
@inject IJSRuntime JS
@inject IResizeHandler ResizeHandler

<div @ref="_sidebarContainer"
style="width: @(Width)px;"
class="@GetClasses()">
    @if (Position == SidebarPosition.Right)
    {
        @if (Resizable)
        {
            <div @onmousedown="OnResizeHandlerMouseDown"
                 @onmousedown:preventDefault="true"
                 @onmousedown:stopPropagation="true"
                 class="resize-handle-left resize-handle d-flex">
                <hr class="vertical-divider">
            </div>
        }
        else
        {
            <hr class="vertical-divider"/>
        }
    }

    <div class="sidebar-content scrollable @(ShowScrollbar ? "hover-scrollable" : "no-scrollbar")">
        @ChildContent
    </div>

    @if (Position == SidebarPosition.Left)
    {
        @if (Resizable)
        {
            <div @onmousedown="OnResizeHandlerMouseDown"
                 @onmousedown:preventDefault="true"
                 @onmousedown:stopPropagation="true"
                 class="resize-handle-right resize-handle d-flex justify-end">
                <hr class="vertical-divider">
            </div>
        }
        else
        {
            <hr class="vertical-divider" />
        }
    }
</div>

@code
{
    private int _resizeStartX;
    private int _resizeStartWidth;
    private ElementReference _sidebarContainer;
    private string _resizeEventId;


    [Parameter] public EventCallback<bool> IsToggledChanged { get; set; }
    [Parameter] public EventCallback<bool> IsResizingChanged { get; set; }
    [Parameter] public EventCallback<int> WidthChanged { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowScrollbar { get; set; }
    [Parameter] public bool Resizable { get; set; }
    [Parameter] public required SidebarPosition Position { get; set; }

    private int _maxWidth;

    private int MaxWidth
    {
        get => _maxWidth;
        set
        {
            if (value != _maxWidth)
            {
                _maxWidth = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private bool _isToggled;

    [Parameter]
    public bool IsToggled
    {
        get => _isToggled;
        set
        {
            if (value != _isToggled)
            {
                if (value)
                {
                    if (Resizable)
                    {
                        _ = ComputeWidthWindowRatio();
                    }
                    else
                    {
                        Width = UIConstants.ChatSidebarInitialWidth;
                    }
                }
                else
                {
                    Width = 0;
                }

                _isToggled = value;
                IsToggledChanged.InvokeAsync(value);

                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private int _width;

    bool _zero;

    [Parameter]
    public int Width
    {
        get => _width;
        set
        {
            if (value != _width)
            {
                _width = value;
                WidthChanged.InvokeAsync(value);
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private bool _isResizing;

    [Parameter]
    public bool IsResizing
    {
        get => _isResizing;
        set
        {
            if (value != _isResizing)
            {
                Trace.WriteLine(IsResizing);
                _isResizing = value;
                IsResizingChanged.InvokeAsync(value);
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private double _widthPercentage;

    private double WidthPercentage
    {
        get => _widthPercentage;
        set
        {
            if (value != _widthPercentage)
            {
                _widthPercentage = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private async Task ComputeWidthWindowRatio()
    {
        var windowWidth = await GetWindowWidth();

        if (Width == 0)
        {
            WidthPercentage = UIConstants.ChatSidebarInitialRatio;
            Width = (int)(WidthPercentage * windowWidth);
        }
        else
        {
            WidthPercentage = Width / (float)windowWidth;
        }
    }


    protected override async void OnInitialized()
    {
        if (Resizable)
        {
            _resizeEventId = await ResizeHandler.RegisterPageResizeAsync(OnPageResize);

            var windowWidth = await GetWindowWidth();
            MaxWidth = (int)(windowWidth * UIConstants.ChatSidebarMaxWidthPercents);
        }
    }

    private string GetClasses()
    {
        string classes = "sidebar-container";

        // classes += IsToggled ? " sidebar-toggled" : " sidebar-hidden";
        classes += Resizable ? " resizable-sidebar" : " fixed-sidebar";

        if (!IsResizing)
        {
            classes += " width-transition";
        }

        return classes;
    }

    private async Task OnPageResize(ResizeEventArgs args)
    {
        if (IsToggled)
        {
            MaxWidth = (int)(args.Width * UIConstants.ChatSidebarMaxWidthPercents);

            if (WidthPercentage == 0)
            {
                await ComputeWidthWindowRatio();
            }

            IsResizing = true;
            Width = (int)(WidthPercentage * args.Width);
        }
    }


    private async Task OnResizeHandlerMouseDown(MouseEventArgs e)
    {
        Trace.WriteLine("mouse down");

        IsResizing = true;
        _resizeStartX = (int)e.ClientX;
        _resizeStartWidth = Width;

        await JS.InvokeVoidAsync("attachResizeListeners", DotNetObjectReference.Create(this));
    }

    private async Task<int> GetWindowWidth()
    {
        return await JS.InvokeAsync<int>("eval", "window.innerWidth");
    }

    [JSInvokable]
    public void ToggleSidebar(bool value)
    {
        IsToggled = value;
        InvokeAsync(() => StateHasChanged());
    }

    [JSInvokable]
    public bool CheckIsToggled()
    {
        return IsToggled;
    }


    [JSInvokable]
    public void OnMouseMove(MouseEventArgs e)
    {

        if (IsResizing)
        {
            int requestedWidth;

            if (Position == SidebarPosition.Right)
            {
                requestedWidth = _resizeStartWidth + (int)(_resizeStartX - e.ClientX);
            }
            else
            {
                requestedWidth = _resizeStartWidth + (int)(e.ClientX - _resizeStartX);
            }

            if (requestedWidth < UIConstants.ChatSidebarMinimumWidth * 0.6)
            {
                IsToggled = false;
            }
            else
            {
                IsToggled |= true;
                Width = Math.Max(UIConstants.ChatSidebarMinimumWidth, Math.Min(MaxWidth, requestedWidth));
                _ = ComputeWidthWindowRatio();
            }
        }
    }

    [JSInvokable]
    public void OnMouseUp()
    {
        IsResizing = false;
        InvokeAsync(StateHasChanged);
    }

    public async void Dispose()
    {
        if (_resizeEventId != null)
        {
            await ResizeHandler.RemovePageResizeAsync(_resizeEventId);
        }
    }

    public enum SidebarPosition
    {
        Left,
        Right
    }
}
