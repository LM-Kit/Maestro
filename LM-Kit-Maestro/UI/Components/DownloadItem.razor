<div class="download-item-root">
    <div class="download-item-body">
        <MudText Typo="Typo.subtitle2">
            @ModelInfo.ModelCard.ShortModelName
        </MudText>

        <MudProgressLinear Value="@(ModelInfo.DownloadInfo.Progress * 100)" />

        <MudText Class="ml-1 outline" Typo="Typo.overline" Style="font-size: 0.7rem">
            @($"{(int)ModelInfo.DownloadInfo.Progress * 100}% • {FileHelpers.FormatFileSize(ModelInfo.DownloadInfo.BytesRead)} / {FileHelpers.FormatFileSize(ModelInfo.FileSize)}")
        </MudText>
    </div>

    <div class="download-item-buttons">
        <IconButton OnClick="OnPauseResumeButtonClicked"
                    Icon="@(ModelInfo.DownloadInfo.Status == DownloadStatus.DownloadPaused ?  "fas fa-play" : "fas fa-pause")"
                    Style="IconButton.ButtonStyle.SecondaryAction" />
        <IconButton OnClick="() => StopRequested.InvokeAsync()"
                    Icon="fas fa-close" Style="IconButton.ButtonStyle.SecondaryAction" />
    </div>
</div>


@code {
    [Parameter] public ModelInfoViewModel ModelInfo { get; set; }

    [Parameter] public EventCallback PauseRequested { get; set; }
    [Parameter] public EventCallback StopRequested { get; set; }
    [Parameter] public EventCallback ResumeRequested { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ModelInfo.DownloadInfo.PropertyChanged += OnDownloadInfoPropertyChanged;
    }

    private void OnDownloadInfoPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnPauseResumeButtonClicked()
    {
        if (ModelInfo.DownloadInfo.Status == DownloadStatus.DownloadPaused)
        {
            ResumeRequested.InvokeAsync();
        }
        else
        {
            PauseRequested.InvokeAsync();
        }
    }
}
