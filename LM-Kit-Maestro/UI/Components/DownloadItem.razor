<div class="download-item-root">
    <div class="download-item-body">
        <MudText Typo="Typo.subtitle2">
            @ModelInfo.ModelCard.ShortModelName
        </MudText>

        <MudProgressLinear Value="@(ModelInfo.DownloadInfo.Progress * 100)" />

        @if (ModelInfo.DownloadInfo.IsDownloading)
        {
            <MudText Class="ml-1 outline" Typo="Typo.overline" Style="font-size: 0.7rem">
                @($"{Math.Round(ModelInfo.DownloadInfo.Progress * 100, 1)}% • {FileHelpers.FormatFileSize(ModelInfo.DownloadInfo.BytesRead)} / {FileHelpers.FormatFileSize(ModelInfo.FileSize)}")
            </MudText>
        }
        else if (ModelInfo.ModelCard.IsLocallyAvailable)
        {
            <div class="text-button" @onclick="() => LoadRequested.InvokeAsync()">
                <MudIcon Icon="fas fa-play"
                         Style="font-size: 0.7rem !important; color: var(--Outline) !important" />

                <MudText Typo="Typo.caption">
                    Load
                </MudText>
            </div>
        }
    </div>

    <div class="download-item-buttons">
        @if (ModelInfo.DownloadInfo.IsDownloading)
        {
            <IconButton OnClick="OnPauseResumeButtonClicked"
            Icon="@(ModelInfo.DownloadInfo.IsDownloadPaused ?  "fas fa-play" : "fas fa-pause")"
            Style="IconButton.ButtonStyle.SecondaryAction" />

            <IconButton OnClick="() => StopRequested.InvokeAsync()"
            Icon="fas fa-close" Style="IconButton.ButtonStyle.SecondaryAction" />
        }
        else
        {
            <IconButton OnClick="() => DeleteRequested.InvokeAsync()"
                Icon="fas fa-close" Style="IconButton.ButtonStyle.SecondaryAction" />
        }
    </div>
</div>

<style>
    .text-button{
        gap: 0.25rem;
        color: var(--Outline);
        transition: all 0.3s;
    }

    .text-button:hover{
        color: var(--OnSurface);
    }
</style>
@code {
    [Parameter] public ModelInfoViewModel ModelInfo { get; set; }

    [Parameter] public EventCallback PauseRequested { get; set; }
    [Parameter] public EventCallback StopRequested { get; set; }
    [Parameter] public EventCallback ResumeRequested { get; set; }
    [Parameter] public EventCallback DeleteRequested { get; set; }
    [Parameter] public EventCallback LoadRequested { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ModelInfo.DownloadInfo.PropertyChanged += OnDownloadInfoPropertyChanged;
    }

    private void OnDownloadInfoPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnPauseResumeButtonClicked()
    {
        if (ModelInfo.DownloadInfo.IsDownloadPaused)
        {
            ResumeRequested.InvokeAsync();
        }
        else
        {
            PauseRequested.InvokeAsync();
        }
    }
}
