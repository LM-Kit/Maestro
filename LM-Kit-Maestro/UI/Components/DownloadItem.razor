<div class="download-item-root">
    <div class="download-item-header">
        <MudText Typo="Typo.subtitle2">
            @ModelInfo.ModelCard.ShortModelName
        </MudText>

        @if (!ModelInfo.DownloadInfo.IsDownloading)
        {
            <button class="basic-button">
                <span class="fas fa-close"/>
            </button>
        }

    </div>

    <div class="download-item-body">
        @if (ModelInfo.DownloadInfo.IsDownloading)
        {
            <MudProgressLinear Class="d-flex align-center" Rounded="true" Color="Color.Primary"
                               Value="@(ModelInfo.DownloadInfo.IsDownloading ? ModelInfo.DownloadInfo.Progress * 100 : 100)"/>
        }
        else
        {
            <MudDivider/>
        }

        <div class="download-item-buttons">
            @if (ModelInfo.DownloadInfo.IsDownloading)
            {
                <IconButton OnClick="OnPauseResumeButtonClicked"
                            Icon="@(ModelInfo.DownloadInfo.IsDownloadPaused ? "fas fa-play" : "fas fa-pause")"
                            Style="IconButton.ButtonStyle.SecondaryAction"/>

                <IconButton OnClick="() => StopRequested.InvokeAsync()"
                            Icon="fas fa-close" Style="IconButton.ButtonStyle.SecondaryAction"/>
            }
        </div>
    </div>
    <div class="download-item-header">

        @if (ModelInfo.DownloadInfo.IsDownloading)
        {
            <MudText Class="ml-1 outline" Typo="Typo.overline" Style="font-size: 0.7rem">
                @($"{Math.Round(ModelInfo.DownloadInfo.Progress * 100, 1)}% • {FileHelpers.FormatFileSize(ModelInfo.DownloadInfo.BytesRead)} / {FileHelpers.FormatFileSize(ModelInfo.FileSize)}")
            </MudText>
        }
        else if (ModelInfo.ModelCard.IsLocallyAvailable)
        {
            <MudText Typo="Typo.overline">
                Download completed
            </MudText>

            <div class="load-model-button" @onclick="() => LoadRequested.InvokeAsync()">
                <MudIcon Icon="fas fa-play"
                         Style="font-size: 0.7rem !important;"/>

                <MudText Typo="Typo.overline">
                    Load
                </MudText>
            </div>
        }
        else if (ModelInfo.DownloadInfo.TerminationReason != null)
        {
            if (ModelInfo.DownloadInfo.TerminationReason == DownloadInfo.DownloadTerminationReason.DownloadCanceled)
            {
                <MudText Typo="Typo.overline">
                    Download canceled
                </MudText>
            }
            else if (ModelInfo.DownloadInfo.TerminationReason == DownloadInfo.DownloadTerminationReason.DownloadError)
            {
                <MudText Typo="Typo.overline" Color="Color.Error">
                    Download failed
                </MudText>
            }
        }
    </div>
    <div>
    </div>
</div>

<style>
    .load-model-button {
        color: var(--Outline);
        cursor: pointer;
    }

    .load-model-button:hover {
        color: var(--Primary);
    }
</style>

@code {
    [Parameter] public ModelInfoViewModel ModelInfo { get; set; }

    [Parameter] public EventCallback PauseRequested { get; set; }
    [Parameter] public EventCallback StopRequested { get; set; }
    [Parameter] public EventCallback ResumeRequested { get; set; }
    [Parameter] public EventCallback DeleteRequested { get; set; }
    [Parameter] public EventCallback LoadRequested { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ModelInfo.PropertyChanged += OnModelInfoPropertyChanged;
        ModelInfo.DownloadInfo.PropertyChanged += OnDownloadInfoPropertyChanged;
    }

    private void OnModelInfoPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ModelInfoViewModel.IsLocallyAvailable))
        {
            var isdownloading = ModelInfo.DownloadInfo.IsDownloading;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnDownloadInfoPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnPauseResumeButtonClicked()
    {
        if (ModelInfo.DownloadInfo.IsDownloadPaused)
        {
            ResumeRequested.InvokeAsync();
        }
        else
        {
            PauseRequested.InvokeAsync();
        }
    }

}
